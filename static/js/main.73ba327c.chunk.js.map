{"version":3,"sources":["data.csv","components/RestaurantItem.js","components/RestaurantList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Outer","styled","div","RestaurantItem","props","name","rating","parseFloat","agg","starRatedColor","numberOfStars","starDimension","starSpacing","cuisines","map","item","exec","currency","avg","votes","fuzzysort","require","dropdownward","keyframes","Filters","Container","RestaurantList","useState","selectedCuisine","setCuisine","availableRestaurants","setAvailableRestaurants","appliedSort","setAppliedSort","searchValue","setSearchValue","useEffect","restData","className","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","type","value","onChange","e","target","placeholder","onClick","document","querySelector","classList","toggle","id","branch","i","val","key","dropdwn","rests","sort","a","b","console","log","handleSortChange","restaurant","cus","Cuisines","split","trim","status","includes","booking","online","rcolor","rtext","go","rest","obj","App","restaurant_data","setRestData","setCuisines","csv","data","then","cuisineSet","Set","add","forEach","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73ba327c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.9ff74655.csv\";","import React from 'react'\nimport styled, { keyframes } from 'styled-components';\nimport StarRatings from 'react-star-ratings';\nconst Outer = styled.div`\n    margin:50px;\n    h3{\n        color:#2D2D41;\n    }\n    color:#7F818A;\n\n    ul{ \n        width:320px;\n        text-decoration:none;\n        display:flex;\n        justify-content:space-between;\n        flex-direction:column;\n        color:#7F818A;\n        list-style-type:none;\n        padding:10px 10px 10px 0;\n    }\n`;\nexport default function RestaurantItem(props) {\n\n    return (\n        <Outer>\n            <h3>{props.name}</h3>\n            <StarRatings\n                rating={parseFloat(props.agg)}\n                starRatedColor='#FFDC59'\n                numberOfStars={5}\n                name='rating'\n                starDimension=\"20px\"\n                starSpacing=\"10px\"\n            />\n            <ul>\n                {props.cuisines.map(item => { return <li>{item}</li> })}\n            </ul>\n            <p> Average Cost for two: {/\\(([^)]+)\\)/.exec(props.currency)[1]}{props.avg}</p>\n            <p> Aggregate rating: {props.agg}</p>\n            <p> Votes: {props.votes}</p>\n        </Outer>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport styled, { keyframes } from 'styled-components';\nimport RestaurantItem from './RestaurantItem';\nconst fuzzysort = require('fuzzysort')\nconst dropdownward = keyframes`\n\t0%{\n\t\theight:0px;\n\t}\n\t100%{\n\t\theight: 250px;\n\t}\n`;\nconst Filters = styled.div`\n    display:flex;\n\n`;\n\nconst Container = styled.div`\n\npadding:50px;\n\n.wrapper {\n    position: relative;\n    .searchBar {\n\t\t\tall: unset;\n\t\t\twidth: 60%;\n\t\t\tpadding: 15px;\n\t\t\tpadding-left: 50px;\n\t\t\tbackground: #ffffff;\n\t\t\tcolor: #a6adc6;\n\t\t\tfont-size: 16px;\n\t\t\tfont-weight: 500;\n\t\t\t-webkit-transition: width 0.7s ease-out;\n\t\t\ttransition: width 0.7s ease-in-out;\n            border-bottom: 2px solid #E9EBF0;\n\t\t\t:focus {\n\t\t\t\tcolor: #1f2438;\n\t\t\t\tborder-bottom: 2px solid #2997d8;\n\t\t\t}\n\t\t}\n    button{\n            all: unset;\n\t\t\tposition: absolute;\n\t\t\tcursor: pointer;\n\t\t\tleft: 15px;\n\t\t\ttop: 50%;\n\t\t\ttransform: translateY(-50%);\n\t\t\theight: 22px;\n    }\n}\n\n.dropdown {\n\t\tposition: relative;\n\t\tmargin-top: 40px;\n\t\tmargin-bottom: 30px;\n        margin-right:50px;\n\t\t.dropbtn {\n\t\t\tdisplay: flex;\n\t\t\tpadding: 10px;\n\t\t\twidth: 160px;\n\t\t\tbackground: #fff;\n            border: 2px solid #DCDFE8;\n\t\t\tborder-radius: 7px;\n\t\t\tcolor: #83858E;\n            font-weight:600;\n\t\t\tjustify-content: space-between;\n\t\t\tuser-select: none;\n\t\t\t:hover {\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t\tsvg {\n\t\t\t\talign-self: center;\n\t\t\t}\n\t\t}\n\t\t.dropdown-content {\n\t\t\tdisplay: none;\n\t\t\tposition: absolute;\n\t\t\tmax-height: 200px;\n\t\t\ttop: 50px;\n\t\t\toverflow-y: scroll;\n\t\t\tbackground-color: #fff;\n\t\t\tmin-width: 160px;\n\t\t\tbox-shadow: 0px 8px 13px #f2eeff;\n\t\t\tborder-radius: 10px;\n\t\t\tz-index: 1;\n\t\t\t> div {\n\t\t\t\tcolor: #1f2438;\n\t\t\t\tpadding: 12px 16px;\n\t\t\t\tdisplay: block;\n\t\t\t\t:hover {\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\tbackground-color: #2997d8;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t.blocked {\n\t\t\t\topacity: 0.6;\n\t\t\t\t:hover {\n\t\t\t\t\tcursor: default;\n\t\t\t\t\tbackground-color: white;\n\t\t\t\t\tcolor: #1f2438;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.show {\n\t\t\tdisplay: block;\n\t\t\tanimation: ${dropdownward} 0.3s linear;\n\t\t}\n\t}\n`;\nexport default function RestaurantList(props) {\n    const [selectedCuisine, setCuisine] = useState('All Types of cuisine');\n    const [availableRestaurants, setAvailableRestaurants] = useState([]);\n    const [appliedSort, setAppliedSort] = useState('None');\n    const [searchValue, setSearchValue] = useState('');\n\n    const toggleDropdown = (e) => {\n        const dropdwn = document.querySelector('#toggleId');\n        dropdwn.classList.toggle('show');\n    };\n    const toggleDropdown2 = (e) => {\n        const dropdwn = document.querySelector('#toggleId2');\n        dropdwn.classList.toggle('show');\n    };\n    const handleFilterChange = (val) => {\n        const dropdwn = document.querySelector('#toggleId');\n        dropdwn.classList.toggle('show');\n        setCuisine(val);\n    };\n\n    const handleSortChange = (val, key) => {\n\n        const dropdwn = document.querySelector('#toggleId2');\n\n        setAppliedSort(val);\n        if (key) {\n            dropdwn.classList.toggle('show');\n        }\n        var rests = props.restData;\n        if (val === 'None') {\n        } else {\n            rests.sort((a, b) => {\n                console.log(val);\n                return -parseFloat(a[val]) + parseFloat(b[val]);\n            })\n        }\n        setAvailableRestaurants(rests)\n\n\n    };\n\n    const handleSearchChange = (e) => {\n        setSearchValue(e.target.value);\n    }\n\n    const sorts = [\n        'None',\n        'Aggregate rating',\n        'Votes',\n        'Average Cost for two'\n    ]\n\n    useEffect(() => {\n        setAvailableRestaurants(props.restData);\n    }, [props.restData])\n\n    return (\n        <Container>\n            <div className=\"wrapper\">\n                <button>\n                    <svg\n                        width=\"22\"\n                        height=\"21\"\n                        viewBox=\"0 0 22 21\"\n                        fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                        <path\n                            fillRule=\"evenodd\"\n                            clipRule=\"evenodd\"\n                            d=\"M16.8533 14.7269C17.9525 13.1996 18.6 11.3254 18.6 9.3C18.6 4.16375 14.4362 0 9.3 0C4.16375 0 0 4.16375 0 9.3C0 14.4362 4.16375 18.6 9.3 18.6C11.5814 18.6 13.6709 17.7785 15.2889 16.4153L19.4868 20.6132C19.9359 21.0623 20.6641 21.0623 21.1132 20.6132C21.5623 20.1641 21.5623 19.4359 21.1132 18.9868L16.8533 14.7269ZM14.5573 13.9219C15.6421 12.689 16.3 11.0713 16.3 9.3C16.3 5.43401 13.166 2.3 9.3 2.3C5.43401 2.3 2.3 5.43401 2.3 9.3C2.3 13.166 5.43401 16.3 9.3 16.3C11.29 16.3 13.086 15.4696 14.3605 14.1365C14.3977 14.084 14.4398 14.0339 14.4868 13.9868C14.5096 13.964 14.5331 13.9424 14.5573 13.9219Z\"\n                            fill=\"#2997d8\"\n                        />\n                    </svg>\n                </button>\n                <input\n                    className=\"searchBar\"\n                    type=\"text\"\n                    value={searchValue}\n                    onChange={handleSearchChange}\n                    placeholder=\"Search restaurants using....\"\n                />\n            </div>\n            <Filters>\n                <div className=\"dropdown\">\n                    <div onClick={toggleDropdown} className=\"dropbtn btntrigger\">\n                        <span className=\"btntrigger\">{selectedCuisine}</span>\n                    </div>\n                    <div className=\"dropdown-content\" id=\"toggleId\">\n                        {props.cuisines.map((branch, i) => {\n                            return (\n                                <div\n                                    onClick={() => { handleFilterChange(branch) }}\n                                    key={i}\n                                >\n                                    {branch}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n\n                <div className=\"dropdown\">\n                    <div onClick={toggleDropdown2} className=\"dropbtn btntrigger\">\n                        <span className=\"btntrigger\">{appliedSort}</span>\n                    </div>\n                    <div className=\"dropdown-content\" id=\"toggleId2\">\n\n                        {sorts.map((branch, i) => {\n                            return (\n                                <div\n                                    onClick={() => { handleSortChange(branch, true) }}\n                                    key={i}\n                                >\n                                    {branch}\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </Filters>\n\n            {searchValue === '' ? (availableRestaurants.map((restaurant, i) => {\n                var cus = restaurant.Cuisines.split(\",\").map(item => item.trim());\n                var status = cus.includes(selectedCuisine);\n                if (selectedCuisine === 'All Types of cuisine') {\n                    return (\n                        <RestaurantItem name={restaurant[\"Restaurant Name\"]} cuisines={cus} avg={restaurant[\"Average Cost for two\"]} currency={restaurant[\"Currency\"]} booking={restaurant[\"Has Table booking\"]} online={restaurant[\"Has Online delivery\"]} agg={restaurant[\"Aggregate rating\"]} rcolor={restaurant[\"Rating color\"]} rtext={restaurant[\"Rating text\"]} votes={restaurant[\"Votes\"]} />\n                    )\n                } else {\n                    if (status) {\n                        return (\n                            <RestaurantItem name={restaurant[\"Restaurant Name\"]} cuisines={cus} avg={restaurant[\"Average Cost for two\"]} currency={restaurant[\"Currency\"]} booking={restaurant[\"Has Table booking\"]} online={restaurant[\"Has Online delivery\"]} agg={restaurant[\"Aggregate rating\"]} rcolor={restaurant[\"Rating color\"]} rtext={restaurant[\"Rating text\"]} votes={restaurant[\"Votes\"]} />\n                        )\n                    }\n                }\n\n            })) : fuzzysort.go(searchValue, availableRestaurants, { key: 'Restaurant Name' }).map(rest => {\n                return rest.obj;\n            }).map((restaurant, i) => {\n                var cus = restaurant.Cuisines.split(\",\").map(item => item.trim());\n                var status = cus.includes(selectedCuisine);\n                if (selectedCuisine === 'All Types of cuisine') {\n                    return (\n                        <RestaurantItem name={restaurant[\"Restaurant Name\"]} cuisines={cus} avg={restaurant[\"Average Cost for two\"]} currency={restaurant[\"Currency\"]} booking={restaurant[\"Has Table booking\"]} online={restaurant[\"Has Online delivery\"]} agg={restaurant[\"Aggregate rating\"]} rcolor={restaurant[\"Rating color\"]} rtext={restaurant[\"Rating text\"]} votes={restaurant[\"Votes\"]} />\n                    )\n                } else {\n                    if (status) {\n                        return (\n                            <RestaurantItem name={restaurant[\"Restaurant Name\"]} cuisines={cus} avg={restaurant[\"Average Cost for two\"]} currency={restaurant[\"Currency\"]} booking={restaurant[\"Has Table booking\"]} online={restaurant[\"Has Online delivery\"]} agg={restaurant[\"Aggregate rating\"]} rcolor={restaurant[\"Rating color\"]} rtext={restaurant[\"Rating text\"]} votes={restaurant[\"Votes\"]} />\n                        )\n                    }\n                }\n\n            })\n            }\n        </Container>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { csv } from 'd3';\nimport data from './data.csv';\nimport RestaurantList from './components/RestaurantList';\n\nfunction App() {\n  const [restaurant_data, setRestData] = useState([]);\n  const [cuisines, setCuisines] = useState([]);\n  useEffect(() => {\n    csv(data).then(data => {\n      console.log(data);\n      let cuisineSet = new Set();\n      cuisineSet.add('All Types of cuisine')\n      data.forEach(restaurant => {\n        var cus = restaurant.Cuisines.split(\",\").map(item => item.trim());\n        cus.forEach(type => {\n          if (type !== \"\") {\n            cuisineSet.add(type);\n          }\n\n        })\n\n      })\n      setRestData(data);\n      setCuisines([...cuisineSet])\n\n    })\n  }, []);\n  return (\n    <div>\n      <RestaurantList cuisines={cuisines} restData={restaurant_data} />\n    </div>\n  )\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}